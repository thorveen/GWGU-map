---
title: "Glaucous-wing Gull data & maps"
author: "Thor Veen"
format:
  html:
    embed-resources: true
editor: visual
execute: 
  echo: false
---

## Data sources

I compiled data from two sources, King, Blight and Bertram 2020 (KBB2020 [pdf](https://figshare.com/articles/figure/Glaucous-winged_Gull_nesting_sites_in_the_Strait_of_Georgia_BC_Canada_/13530971/1), data provided in spreadsheet with fig share) and Rodway, Campbell and Lemon 2023 (SCoBC2023 [link](http://www.wildlifebc.org/), data scraped from table 6). Using KBB2020 as the most recent and comprehensive benchmark for GWGU, I added to this dataset the information of additional colonies from SCoBC2023. I match the location codes and cross referenced location names with SCoBC2023 to make the final dataset as compatible as possible with other and future resources.

In the next section I visualize the occupancy of all known colonies for different periods. Important information to keep in mind when assessing the maps:

-   The year mentioned is the start year for which data is included (i.e. 2000 means data from 2000 onwards (\>= 2000))

-   Each known breeding location of GWGU in the dataset is indicated by a small *black* dot.

-   The counts (in *red*) are normalised between 0 (same size dot as black dot) and 10 (biggest colony in the dataset selection, i.e. not the entire dataset necessarily).

-   0 counts are not included to make it easy to see which colonies had active breeding

```{r}
#| warning: false
# install.packages("webshot2")

library(tidyverse)
library(dplyr)
library(leaflet.extras)
library(magrittr)
library(sf)

#library(webshot2)
# load data
all.GWGU <- read.csv("b.data.clean/KBB2020andSCoBC2023combined_final.csv")

```

## Data over time

Histogram showing the number of datapoints over time.

```{r}

hist(all.GWGU$Year, breaks = seq(min(all.GWGU$Year) - 0.5, max(all.GWGU$Year) + 0.5, by = 1), 
     main = "Number of entries per year", xlab = "Year", ylab = "Number of entries", 
     col = "black", border = "black")

```

Based on the frequency distribution I take three periods, starting at 2004, 1980 and the whole period starting at `{r} min(all.GWGU$Year)` as we want to especially focus on 'recent' data. Easy to change the dates if you like.

## Maps

```{r}
radius_basic_dot <- 4
scale_max <- 10       # normalize count size between 0 and scale_max
```

An overview map where for each of the `{r} length(unique(all.GWGU$LocationName))` known nesting location all the available counts can be seen by clicking on the location dot.

```{r}
library(leaflet)
library(leaflet.extras)

# Group data by LocationName, sort by Year, and concatenate counts for each year
popup_data <- all.GWGU %>%
  group_by(LocationName) %>%
  arrange(Year) %>%
  summarise(Counts = paste(Year, Count, sep = ": ", collapse = "<br>"))

# Create a leaflet map
map <- leaflet() %>%
  addTiles() %>%
  addCircleMarkers(
    data = all.GWGU,  # Use all.GWGU as data
    lng = ~Longitude, 
    lat = ~Latitude,
    color = "black",            # Dot color
    radius = radius_basic_dot,                # Dot radius
    stroke = FALSE,            # No stroke
    fillOpacity = 1,
    popup = ~paste(
      "<strong>Location:</strong> ", LocationName, "<br>",
      "<strong>Counts:</strong><br>", popup_data$Counts[match(LocationName, popup_data$LocationName)]
    ),
    group = "locations"
  )

# Display the map
map
```

### Starting from 2004

```{r}


# Threshold year
threshold_year <- 2004

# Filter data to keep only the data from threshold year onwards
filtered_data <- all.GWGU %>%
  filter(Year >= threshold_year)

filtered_data_wZero <- filtered_data %>%
  arrange(LocationName, desc(Year)) %>%
  distinct(LocationName, .keep_all = TRUE)

n_zeros <- length(which(filtered_data_wZero$Count == 0))
n.all <- length(filtered_data_wZero$Count)

```

Histogram of counts including 0. There are `{r} n_zeros` 0's out of the `{r} n.all` entries from `{r} length(unique(filtered_data_wZero$LocationName))` unique colonies in this time period.

```{r}
hist(filtered_data_wZero$Count, main = "Colony size", xlab = "Size",breaks = 100)

```

Map (excluding 0)

```{r}

# Extract unique location names and coordinates
unique_locations <- all.GWGU %>%
  distinct(LocationName, Latitude, Longitude)

# Filter data to keep only the data from threshold year onwards
filtered_data <- all.GWGU %>%
  filter(Year >= threshold_year)

# Keep only the most recent count for each LocationName
filtered_data <- filtered_data %>%
  filter(Count != 0) %>% 
  arrange(LocationName, desc(Year)) %>%
  distinct(LocationName, .keep_all = TRUE)

filtered_data$CountScaled <- (filtered_data$Count / 
                                (max(filtered_data$Count)) * scale_max) + 
                                radius_basic_dot

# map making.
# Create a Leaflet map
map <- leaflet() %>%
  addTiles()  # Add default OpenStreetMap tiles

# Add a dot for each unique location
map <- map %>%
  addCircleMarkers(data = unique_locations,  # Use unique locations data
                   lng = ~Longitude,          # Longitude
                   lat = ~Latitude,           # Latitude
                   color = "black",            # Dot color
                   radius = radius_basic_dot,                # Dot radius
                   stroke = FALSE,            # No stroke
                   fillOpacity = 1,
                   popup = ~LocationName)           # Full opacity

map <- map %>%
  addCircleMarkers(data = filtered_data,  # Use unique locations data
                   lng = ~Longitude,          # Longitude
                   lat = ~Latitude,           # Latitude
                   color = "red",            # Dot color
                   radius = ~CountScaled,                # Dot radius
                   stroke = FALSE,            # No stroke
                   fillOpacity = 0.9,
                   popup = ~LocationName)           # Full opacity

# Print the map
map

```

### Starting from 1980

```{r}
# Threshold year
threshold_year <- 1980

# Filter data to keep only the data from threshold year onwards
filtered_data <- all.GWGU %>%
  filter(Year >= threshold_year)

filtered_data_wZero <- filtered_data %>%
  arrange(LocationName, desc(Year)) %>%
  distinct(LocationName, .keep_all = TRUE)

n_zeros <- length(which(filtered_data_wZero$Count == 0))
n.all <- length(filtered_data_wZero$Count)

```

Histogram of counts including 0. There are `{r} n_zeros` 0's out of the `{r} n.all` entries from `{r} length(unique(filtered_data_wZero$LocationName))` unique colonies in this time period.

```{r}
hist(filtered_data_wZero$Count, main = "Colony size", xlab = "Size",breaks = 100)

```

Map (excluding 0)

```{r}

# Extract unique location names and coordinates
unique_locations <- all.GWGU %>%
  distinct(LocationName, Latitude, Longitude)

# Filter data to keep only the data from threshold year onwards
filtered_data <- all.GWGU %>%
  filter(Year >= threshold_year)

# Keep only the most recent count for each LocationName
filtered_data <- filtered_data %>%
  filter(Count != 0) %>% 
  arrange(LocationName, desc(Year)) %>%
  distinct(LocationName, .keep_all = TRUE)

filtered_data$CountScaled <- (filtered_data$Count / 
                                (max(filtered_data$Count)) * scale_max) + 
                                radius_basic_dot

# map making.
# Create a Leaflet map
map <- leaflet() %>%
  addTiles()  # Add default OpenStreetMap tiles

# Add a dot for each unique location
map <- map %>%
  addCircleMarkers(data = unique_locations,  # Use unique locations data
                   lng = ~Longitude,          # Longitude
                   lat = ~Latitude,           # Latitude
                   color = "black",            # Dot color
                   radius = radius_basic_dot,                # Dot radius
                   stroke = FALSE,            # No stroke
                   fillOpacity = 1,
                   popup = ~LocationName)           # Full opacity

map <- map %>%
  addCircleMarkers(data = filtered_data,  # Use unique locations data
                   lng = ~Longitude,          # Longitude
                   lat = ~Latitude,           # Latitude
                   color = "red",            # Dot color
                   radius = ~CountScaled,                # Dot radius
                   stroke = FALSE,            # No stroke
                   fillOpacity = 0.9,
                   popup = ~LocationName)           # Full opacity

# Print the map
map

```

### Smaller colonies focus

The above maps are really dominated by the larger colonies. By added an upper limit to colony size we can see how the medium to smaller colonies are distributed. Focus is on the more recent time period starting from 2004 and max colony size is 500.

```{r}
# Threshold year
threshold_year <- 2004
threshold_count <- 500 # max colony 3500 

# Filter data to keep only the data from threshold year onwards
filtered_data <- all.GWGU %>%
  filter(Year >= threshold_year)

filtered_data_wZero <- filtered_data %>%
  filter(Count <= threshold_count) %>%
  arrange(LocationName, desc(Year)) %>%
  distinct(LocationName, .keep_all = TRUE)

n_zeros <- length(which(filtered_data_wZero$Count == 0))
n.all <- length(filtered_data_wZero$Count)

```

Histogram of counts including 0. There are `{r} n_zeros` 0's out of the `{r} n.all` entries from `{r} length(unique(filtered_data_wZero$LocationName))` unique colonies in this time period.

```{r}
hist(filtered_data_wZero$Count, main = "Colony size", xlab = "Size",breaks = 100)

```

Map (excluding 0)

```{r}
library(leaflet)
library(leaflet.extras)

# Extract unique location names and coordinates
unique_locations <- all.GWGU %>%
  distinct(LocationName, Latitude, Longitude)

# Filter data to keep only the data from threshold year onwards
filtered_data <- all.GWGU %>%
  filter(Year >= threshold_year)

# Keep only the most recent count for each LocationName
filtered_data <- filtered_data %>%
  filter(Count != 0, Count <= threshold_count) %>% 
  arrange(LocationName, desc(Year)) %>%
  distinct(LocationName, .keep_all = TRUE)

filtered_data$CountScaled <- (filtered_data$Count / 
                                (max(filtered_data$Count)) * scale_max) + 
                                radius_basic_dot

# map making.
# Create a Leaflet map
map <- leaflet() %>%
  addTiles()  # Add default OpenStreetMap tiles

# Add a dot for each unique location
map <- map %>%
  addCircleMarkers(data = unique_locations,  # Use unique locations data
                   lng = ~Longitude,          # Longitude
                   lat = ~Latitude,           # Latitude
                   color = "black",            # Dot color
                   radius = radius_basic_dot,                # Dot radius
                   stroke = FALSE,            # No stroke
                   fillOpacity = 1,
                   popup = ~LocationName)           # Full opacity

map <- map %>%
  addCircleMarkers(data = filtered_data,  # Use unique locations data
                   lng = ~Longitude,          # Longitude
                   lat = ~Latitude,           # Latitude
                   color = "red",            # Dot color
                   radius = ~CountScaled,                # Dot radius
                   stroke = FALSE,            # No stroke
                   fillOpacity = 0.9,
                   popup = ~LocationName)           # Full opacity

# Print the map
map

```

### 2024 Survey methods

```{r}
# check these setting in the survey.and.map.prep.R file
# Threshold year
# threshold_year <- 2004
# threshold to include colonies of a certain number of breeding pairs or higher before the threshold_year (not to miss large colonies)
#threshold_count <- 10


final_locations <- unique(all.GWGU$LocationName[all.GWGU$Selected == 1])

n.colonies <- length(final_locations)

# Filter the original data frame to include only the final selected locations and all their entries
GWGU.select <- all.GWGU %>%
  filter(LocationName %in% final_locations)

# and a selection of locations not selected
GWGU.not.select <- all.GWGU %>%
  filter(!(LocationName %in% final_locations))

# Group data by LocationName, sort by Year, and concatenate counts for each year for all the data
popup_data <- all.GWGU %>%
  group_by(LocationName) %>%
  arrange(Year) %>%
  summarise(Counts = paste(Year, Count, sep = ": ", collapse = "<br>"))

# make selection for sites which are covered
locations_covered <- all.GWGU %>%
  filter(Covered == "covered")

# make selection for sites which are covered
locations_NationalPark <- all.GWGU %>%
  filter(NationalPark == "NationalPark")

# make selection for sites which are covered
locations_ProvincialPark <- all.GWGU %>%
  filter(ProvincialPark == "ProvincialPark")

# make selection for sites which are covered
locations_EcolReserve <- all.GWGU %>%
  filter(EcolReserve == "EcolReserve")

# read shapefile
PowelRiver <- st_read("shp/PowelRiver.shx") # included with sf package
central <- st_read("shp/central.shx") # included with sf package
HoweSound <- st_read("shp/HoweSound.shx") # included with sf package
Nanaimo <- st_read("shp/Nanaimo.shx") # included with sf package
SunshineCoast <- st_read("shp/SunshineCoast.shx") # included with sf package

# read data for boat launches
boat.launch <- read.csv("b.data.clean/boat_launches.csv")
str(boat.launch)
```

After assessing the above information we proceed to set some thresholds to select the final set of colonies to survey in 2024.

-   include breeding locations with active breeding (\>= 1 pair) starting from `{r} threshold_year`.

-   include breeding locations which have records before `{r} threshold_year` with \>= `{r} threshold_count` breeding pairs.

black: selected colonies (n =`{r} n.colonies`) in black. grey: not selected targets. yellow center: covered by others (i.e. not needed to be surveyed by us) and dark green outer ring: National Park, medium green = Provincial Park and light green = Ecological Reserve.

```{r}

line.w <- 1.5 # line thickness of polygons

# Create a Leaflet map
map <- leaflet() %>%
  addTiles()  # Add default OpenStreetMap tiles

# add polygons for regions
map <- map %>%
  addPolygons(data = PowelRiver, fillOpacity = 0, weight = line.w) %>%
  addPolygons(data = central, fillOpacity = 0, weight = line.w) %>%
  addPolygons(data = HoweSound, fillOpacity = 0, weight = line.w) %>%
  addPolygons(data = Nanaimo, fillOpacity = 0, weight = line.w) %>%
  addPolygons(data = SunshineCoast, fillOpacity = 0, weight = line.w)

# add boat launches
map <- map %>%
  addCircleMarkers(
    data = boat.launch,  # Use all.GWGU as data
    lng = ~Longitude, 
    lat = ~Latitude,
    color = "blue",            # Dot color
    radius = 1.7 * radius_basic_dot,                # Dot radius
    stroke = FALSE,            # No stroke
    fillOpacity = 0.7,
    popup = ~~Name,
  )

# layer for sites which are National Parks jurisdiction 
map <- map %>%
  addCircleMarkers(
    data = locations_NationalPark,  # Use all.GWGU as data
    lng = ~Longitude, 
    lat = ~Latitude,
    color = "green",            # Dot color
    radius = 1.7 * radius_basic_dot,                # Dot radius
    stroke = FALSE,            # No stroke
    fillOpacity = 0.7,
    popup = ~~LocationName,
    #group = "locations"
  )

# layer for sites which are Provincial Parks jurisdiction 
map <- map %>%
  addCircleMarkers(
    data = locations_ProvincialPark,  # Use all.GWGU as data
    lng = ~Longitude, 
    lat = ~Latitude,
    color = "limegreen",            # Dot color
    radius = 1.7 * radius_basic_dot,                # Dot radius
    stroke = FALSE,            # No stroke
    fillOpacity = 0.7,
    popup = ~~LocationName,
    #group = "locations"
  )

# layer for sites which are ecological reserves jurisdiction 
map <- map %>%
  addCircleMarkers(
    data = locations_EcolReserve,  # Use all.GWGU as data
    lng = ~Longitude, 
    lat = ~Latitude,
    color = "lightgreen",            # Dot color
    radius = 1.7 * radius_basic_dot,                # Dot radius
    stroke = FALSE,            # No stroke
    fillOpacity = 0.7,
    popup = ~~LocationName,
    #group = "locations"
  )

# Add a dot for each unique location
map <- map %>%
  addCircleMarkers(
    data = GWGU.not.select,  # Use all.GWGU as data
    lng = ~Longitude, 
    lat = ~Latitude,
    color = "gray",            # Dot color
    radius = 1 * radius_basic_dot,                # Dot radius
    stroke = FALSE,            # No stroke
    fillOpacity = 0.6,
    popup = ~paste(
      "<strong>Location:</strong> ", LocationName, "<br>",
      "<strong>Counts:</strong><br>", popup_data$Counts[match(LocationName, popup_data$LocationName)]
    ),
    group = "locations"
  )


map <- map %>%
  addCircleMarkers(
    data = GWGU.select,  # Use all.GWGU as data
    lng = ~Longitude, 
    lat = ~Latitude,
    color = "black",            # Dot color
    radius = radius_basic_dot,                # Dot radius
    stroke = FALSE,            # No stroke
    fillOpacity = 1,
    popup = ~paste(
      "<strong>Location:</strong> ", LocationName, "<br>",
      "<strong>Counts:</strong><br>", popup_data$Counts[match(LocationName, popup_data$LocationName)]
    ),
    group = "locations"
  )

# sites that are covered in some way or another
map <- map %>%
  addCircleMarkers(
    data = locations_covered,  # Use all.GWGU as data
    lng = ~Longitude, 
    lat = ~Latitude,
    color = "yellow",            # Dot color
    radius = 0.5 * radius_basic_dot,                # Dot radius
    stroke = FALSE,            # No stroke
    fillOpacity = 1,
    popup = ~~LocationName,
    #group = "locations"
  )

# Print the map
map
```

#### Priorities

\
1) breeding survey selected sites

2a) add extra 'en route' sites

2b) add clutch size and egg size

2c) ground truthing: both fly and count on foot

### elevation map for UAV mission planning

```{r}
# Create a leaflet map
map <- leaflet() %>%
  addProviderTiles(providers$OpenTopoMap) %>%
  addCircleMarkers(
    data = all.GWGU,  # Use all.GWGU as data
    lng = ~Longitude, 
    lat = ~Latitude,
    color = "black",            # Dot color
    radius = radius_basic_dot,                # Dot radius
    stroke = FALSE,            # No stroke
    fillOpacity = 1,
    popup = ~LocationName
  )

# Display the map
map
```

### Next steps

This is just a quick and dirty visualization exercise and we can tune it for our needs. For example:

-   add which colonies can be done by UAV from land.

-   zones to be done by boat

-   detailed timeline with launch locations, etc
