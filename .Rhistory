library(tidyverse)
# load data
wkdir <- getwd()
wkdir
all.GWGU <- read.csv(paste(wkdir,"/KBB2020andSCoBC2023combined.csv", sep ="") )
coord.na <- which(is.na(all.GWGU$Latitude))
all.GWGU[coord.na,]
coord.na
coord.na <- which(is.na(all.GWGU$Latitude))
# exclude data from VictoriaBBS as it has no coords
all.GWGU <- all.GWGU[-coord.na,]
all.GWGU
head(all.GWGU)
```{r}
library(tidyverse)
library(tidyverse)
# load data
wkdir <- getwd()
all.GWGU <- read.csv(paste(wkdir,"/KBB2020andSCoBC2023combined.csv", sep ="") )
coord.na <- which(is.na(all.GWGU$Latitude))
# exclude data from VictoriaBBS as it has no coords
all.GWGU <- all.GWGU[-coord.na,]
#head(all.GWGU)
```
library(tidyverse)
# load data
wkdir <- getwd()
all.GWGU <- read.csv(paste(wkdir,"/KBB2020andSCoBC2023combined.csv", sep ="") )
coord.na <- which(is.na(all.GWGU$Latitude))
# exclude data from VictoriaBBS as it has no coords
all.GWGU <- all.GWGU[-coord.na,]
coord.na <- which(is.na(all.GWGU$Latitude))
coord.na
# load data
wkdir <- getwd()
all.GWGU <- read.csv(paste(wkdir,"/KBB2020andSCoBC2023combined.csv", sep ="") )
coord.na <- which(is.na(all.GWGU$Latitude))
all.GWGU[-coord.na,]
coord.na
# exclude data from VictoriaBBS as it has no coords
all.GWGU <- all.GWGU[-coord.na,]
library(leaflet)
library(leaflet.extras)
# Threshold year
threshold_year <- 2000
filtered_data
filtered_data
filtered_data <- filtered_data %>%
arrange(LocationName, desc(Year)) %>%
distinct(LocationName, .keep_all = TRUE)
# Threshold year
threshold_year <- 2000
radius_basic_dot <- 2
count_spr <- 10
# Extract unique location names and coordinates
unique_locations <- all.GWGU %>%
distinct(LocationName, Latitude, Longitude)
# Filter data to keep only the data from threshold year onwards
filtered_data <- all.GWGU %>%
filter(Year >= threshold_year)
# Keep only the most recent count for each LocationName
filtered_data <- filtered_data %>%
arrange(LocationName, desc(Year)) %>%
distinct(LocationName, .keep_all = TRUE)
filtered_data$CountScaled <- ((filtered_data$Count - min(filtered_data$Count)) /                          (max(filtered_data$Count) - min(filtered_data$Count)) * count_spr) + radius_basic_dot
filtered_data
$Count
filtered_data$Count
filtered_data$CountScaled
filtered_data$Count
arrange(LocationName, desc(Year)) %>%
distinct(LocationName, .keep_all = TRUE)
threshold_year <- 2005
radius_basic_dot <- 2
scale_max <- 10       # normalize count size between 0 and scale_max
# Extract unique location names and coordinates
unique_locations <- all.GWGU %>%
distinct(LocationName, Latitude, Longitude)
library(tidyverse)
# load data
wkdir <- getwd()
all.GWGU <- read.csv(paste(wkdir,"/KBB2020andSCoBC2023combined.csv", sep ="") )
coord.na <- which(is.na(all.GWGU$Latitude))
# exclude data from VictoriaBBS as it has no coords
all.GWGU <- all.GWGU[-coord.na,]
#head(all.GWGU)
library(leaflet)
library(leaflet.extras)
# Threshold year
threshold_year <- 2005
radius_basic_dot <- 2
scale_max <- 10       # normalize count size between 0 and scale_max
# Extract unique location names and coordinates
unique_locations <- all.GWGU %>%
distinct(LocationName, Latitude, Longitude)
filtered_data <- all.GWGU %>%
filter(Year >= threshold_year)
filtered_data_wZero <- filtered_data %>%
arrange(LocationName, desc(Year)) %>%
distinct(LocationName, .keep_all = TRUE)
hist(filtered_data_wZero$Count)
hist(filtered_data_wZero$Count, break == 20)
# Threshold year
threshold_year <- 2005
radius_basic_dot <- 2
scale_max <- 10       # normalize count size between 0 and scale_max
# Filter data to keep only the data from threshold year onwards
filtered_data <- all.GWGU %>%
filter(Year >= threshold_year)
filtered_data
filtered_data
library(tidyverse)
# load data
wkdir <- getwd()
all.GWGU <- read.csv(paste(wkdir,"/KBB2020andSCoBC2023combined.csv", sep ="") )
coord.na <- which(is.na(all.GWGU$Latitude))
# exclude data from VictoriaBBS as it has no coords
all.GWGU <- all.GWGU[-coord.na,]
# Threshold year
threshold_year <- 2005
radius_basic_dot <- 2
scale_max <- 10       # normalize count size between 0 and scale_max
filtered_data <- all.GWGU %>%
filter(Year >= threshold_year)
filtered_data
filtered_data_wZero <- filtered_data %>%
arrange(LocationName, desc(Year)) %>%
distinct(LocationName, .keep_all = TRUE)
hist(filtered_data_wZero$Count, breaks = 20)
hist(filtered_data_wZero$Count, main = "colony size", breaks = 100)
hist(log(filtered_data_wZero$Count), main = "colony size", breaks = 100)
filtered_data_wZero <- filtered_data %>%
arrange(LocationName, desc(Year)) %>%
distinct(LocationName, .keep_all = TRUE)
filtered_data_wZero
threshold_year <- 2005
radius_basic_dot <- 2
scale_max <- 10       # normalize count size between 0 and scale_max
# Filter data to keep only the data from threshold year onwards
filtered_data <- all.GWGU %>%
filter(Year >= threshold_year)
filtered_data_wZero <- filtered_data %>%
arrange(LocationName, desc(Year)) %>%
distinct(LocationName, .keep_all = TRUE)
filtered_data_wZero$Count == 0
which(filtered_data_wZero$Count == 0)
length(which(filtered_data_wZero$Count == 0))
n_zeros <- length(which(filtered_data_wZero$Count == 0))
n_zeros
length(filtered_data_wZero$Count)
filtered_data_wZero
hist(all.GWGU$Year, breaks = unique(all.GWGU$Year$Year),
main = "Number of Entries per Year", xlab = "Year", ylab = "Number of Entries",
col = "skyblue", border = "black")
hist(all.GWGU$Year, breaks = unique(all.GWGU$Year),
main = "Number of Entries per Year", xlab = "Year", ylab = "Number o f Entries",
col = "skyblue", border = "black")
hist(all.GWGU$Year, breaks = seq(min(all.GWGU$Year) - 0.5, max(all.GWGU$Year) + 0.5, by = 1),
main = "Number of Entries per Year", xlab = "Year", ylab = "Number of Entries",
col = "black", border = "black")
hist(filtered_data_wZero$Count, main = "colony size", breaks = 100)
- add which colonies are covered for the upcoming survey.
- add which colonies are covered for the upcoming survey.
- add which colonies are covered for the upcoming survey.
- add which colonies can be done by AUV from land
- add which colonies can be done by AUV from land
### Next steps
This is just a quick and dirty visualization exercise and we can tune it for our needs. For example:
### Next steps
This is just a quick and dirty visualization exercise and we can tune it for our needs. For example:
### Next steps
This is just a quick and dirty visualization exercise and we can tune it for our needs. For example:
- add which colonies are covered for the upcoming survey.
- add which colonies can be done by AUV from land
- etc.
install.packages("webshot2")
library(webshot2)
