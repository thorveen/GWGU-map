map <- map %>%
addGeoJSON(geojson_data,
fillColor = "red",
fillOpacity = 0.1,
color = "black",
weight = 1)
# Print the map
map
map <- leaflet() %>%
addTiles() %>%
setView(lng = -73.9654, lat = 40.7829, zoom = 12)  # Set the initial view to Central Park
# Add the GeoJSON data as a polygon layer
map <- map %>%
addGeoJSON(geojson_data,
fillColor = "red",
fillOpacity = 0.1,
color = "black",
weight = 1)
# Print the map
map
# Create a Leaflet map
map <- leaflet() %>%
addTiles() %>%
setView(lng = -73.9654, lat = 40.7829, zoom = 13)  # Set the initial view to Central Park
# Add the GeoJSON data as a polygon layer
map <- map %>%
addGeoJSON(geojson_data,
fillColor = "red",
fillOpacity = 0.1,
color = "black",
weight = 1)
# Print the map
map
map <- leaflet() %>%
addProviderTiles(providers$OpenTopoMap)  # Add default OpenStreetMap tiles
# Add a dot for each unique location
map <- map %>%
addCircleMarkers(data = unique_locations,  # Use unique locations data
lng = ~Longitude,          # Longitude
lat = ~Latitude,           # Latitude
color = "black",            # Dot color
radius = radius_basic_dot,                # Dot radius
stroke = FALSE,            # No stroke
fillOpacity = 1,
popup = ~LocationName)           # Full opacity
map <- map %>%
addCircleMarkers(data = filtered_data,  # Use unique locations data
lng = ~Longitude,          # Longitude
lat = ~Latitude,           # Latitude
color = "red",            # Dot color
radius = ~CountScaled,                # Dot radius
stroke = FALSE,            # No stroke
fillOpacity = 1,
popup = ~LocationName)           # Full opacity
# Print the map
map
map <- leaflet() %>%
addProviderTiles(providers$OpenTopoMap)  # Add default OpenStreetMap tiles
# Add a dot for each unique location
map <- map %>%
addCircleMarkers(data = unique_locations,  # Use unique locations data
lng = ~Longitude,          # Longitude
lat = ~Latitude,           # Latitude
color = "black",            # Dot color
radius = radius_basic_dot,                # Dot radius
stroke = FALSE,            # No stroke
fillOpacity = 1,
popup = ~LocationName)           # Full opacity
map <- map %>%
addCircleMarkers(
data = GWGU.select,  # Use all.GWGU as data
lng = ~Longitude,
lat = ~Latitude,
color = "black",            # Dot color
radius = radius_basic_dot,                # Dot radius
stroke = FALSE,            # No stroke
fillOpacity = 1,
popup = ~paste(
"<strong>Location:</strong> ", LocationName, "<br>",
"<strong>Counts:</strong><br>", popup_data$Counts[match(LocationName, popup_data$LocationName)]
),
group = "locations"
)
# Print the map
map
map <- map %>%
addCircleMarkers(
data = GWGU.select,  # Use all.GWGU as data
lng = ~Longitude,
lat = ~Latitude,
color = "black",            # Dot color
radius = radius_basic_dot,                # Dot radius
stroke = FALSE,            # No stroke
fillOpacity = 1,
popup = ~LocationName
)
# Print the map
map
map <- map %>%
addCircleMarkers(
data = GWGU.select,  # Use all.GWGU as data
lng = ~Longitude,
lat = ~Latitude,
color = "red",            # Dot color
radius = radius_basic_dot,                # Dot radius
stroke = FALSE,            # No stroke
fillOpacity = 1,
popup = ~paste(
"<strong>Location:</strong> ", LocationName, "<br>",
"<strong>Counts:</strong><br>", popup_data$Counts[match(LocationName, popup_data$LocationName)]
),
group = "locations"
)
# Print the map
map
# Add a dot for each unique location
map <- map %>%
addCircleMarkers(data = unique_locations,  # Use unique locations data
lng = ~Longitude,          # Longitude
lat = ~Latitude,           # Latitude
color = "grey",            # Dot color
radius = radius_basic_dot,                # Dot radius
stroke = FALSE,            # No stroke
fillOpacity = 0.5,
popup = ~LocationName)           # Full opacity
map <- map %>%
addCircleMarkers(
data = GWGU.select,  # Use all.GWGU as data
lng = ~Longitude,
lat = ~Latitude,
color = "black",            # Dot color
radius = radius_basic_dot,                # Dot radius
stroke = FALSE,            # No stroke
fillOpacity = 1,
popup = ~paste(
"<strong>Location:</strong> ", LocationName, "<br>",
"<strong>Counts:</strong><br>", popup_data$Counts[match(LocationName, popup_data$LocationName)]
),
group = "locations"
)
# Add a dot for each unique location
map <- map %>%
addCircleMarkers(data = unique_locations,  # Use unique locations data
lng = ~Longitude,          # Longitude
lat = ~Latitude,           # Latitude
color = "gray",            # Dot color
radius = radius_basic_dot,                # Dot radius
stroke = FALSE,            # No stroke
fillOpacity = 0.5,
popup = ~LocationName)           # Full opacity
map <- map %>%
addCircleMarkers(
data = GWGU.select,  # Use all.GWGU as data
lng = ~Longitude,
lat = ~Latitude,
color = "black",            # Dot color
radius = radius_basic_dot,                # Dot radius
stroke = FALSE,            # No stroke
fillOpacity = 1,
popup = ~paste(
"<strong>Location:</strong> ", LocationName, "<br>",
"<strong>Counts:</strong><br>", popup_data$Counts[match(LocationName, popup_data$LocationName)]
),
group = "locations"
)
# Add a dot for each unique location
map <- map %>%
addCircleMarkers(data = unique_locations,  # Use unique locations data
lng = ~Longitude,          # Longitude
lat = ~Latitude,           # Latitude
color = "gray",            # Dot color
radius = radius_basic_dot,                # Dot radius
stroke = FALSE,            # No stroke
fillOpacity = 1,
popup = ~LocationName)           # Full opacity
map <- map %>%
addCircleMarkers(
data = GWGU.select,  # Use all.GWGU as data
lng = ~Longitude,
lat = ~Latitude,
color = "black",            # Dot color
radius = radius_basic_dot,                # Dot radius
stroke = FALSE,            # No stroke
fillOpacity = 1,
popup = ~paste(
"<strong>Location:</strong> ", LocationName, "<br>",
"<strong>Counts:</strong><br>", popup_data$Counts[match(LocationName, popup_data$LocationName)]
),
group = "locations"
)
# Add a dot for each unique location
map <- map %>%
addCircleMarkers(data = unique_locations,  # Use unique locations data
lng = ~Longitude,          # Longitude
lat = ~Latitude,           # Latitude
color ="red",            # Dot color
radius = radius_basic_dot,                # Dot radius
stroke = FALSE,            # No stroke
fillOpacity = 1,
popup = ~LocationName)           # Full opacity
# Add a dot for each unique location
map <- map %>%
addCircleMarkers(data = unique_locations,  # Use unique locations data
lng = ~Longitude,          # Longitude
lat = ~Latitude,           # Latitude
color ="blue",            # Dot color
radius = radius_basic_dot,                # Dot radius
stroke = FALSE,            # No stroke
fillOpacity = 1,
popup = ~LocationName)           # Full opacity
map <- map %>%
addCircleMarkers(
data = GWGU.select,  # Use all.GWGU as data
lng = ~Longitude,
lat = ~Latitude,
color = "black",            # Dot color
radius = radius_basic_dot,                # Dot radius
stroke = FALSE,            # No stroke
fillOpacity = 1,
popup = ~paste(
"<strong>Location:</strong> ", LocationName, "<br>",
"<strong>Counts:</strong><br>", popup_data$Counts[match(LocationName, popup_data$LocationName)]
),
group = "locations"
)
map <- leaflet() %>%
addProviderTiles(providers$OpenTopoMap)  # Add default OpenStreetMap tiles
# Add a dot for each unique location
map <- map %>%
addCircleMarkers(data = unique_locations,  # Use unique locations data
lng = ~Longitude,          # Longitude
lat = ~Latitude,           # Latitude
color ="blue",            # Dot color
radius = radius_basic_dot,                # Dot radius
stroke = FALSE,            # No stroke
fillOpacity = 1,
popup = ~LocationName)           # Full opacity
map <- map %>%
addCircleMarkers(
data = GWGU.select,  # Use all.GWGU as data
lng = ~Longitude,
lat = ~Latitude,
color = "black",            # Dot color
radius = radius_basic_dot,                # Dot radius
stroke = FALSE,            # No stroke
fillOpacity = 1,
popup = ~paste(
"<strong>Location:</strong> ", LocationName, "<br>",
"<strong>Counts:</strong><br>", popup_data$Counts[match(LocationName, popup_data$LocationName)]
),
group = "locations"
)
# Print the map
map
# Add a dot for each unique location
map <- map %>%
addCircleMarkers(data = unique_locations,  # Use unique locations data
lng = ~Longitude,          # Longitude
lat = ~Latitude,           # Latitude
color ="gray",            # Dot color
radius = radius_basic_dot,                # Dot radius
stroke = FALSE,            # No stroke
fillOpacity = 1,
popup = ~LocationName)           # Full opacity
map <- leaflet() %>%
addProviderTiles(providers$OpenTopoMap)  # Add default OpenStreetMap tiles
# Add a dot for each unique location
map <- map %>%
addCircleMarkers(data = unique_locations,  # Use unique locations data
lng = ~Longitude,          # Longitude
lat = ~Latitude,           # Latitude
color ="gray",            # Dot color
radius = radius_basic_dot,                # Dot radius
stroke = FALSE,            # No stroke
fillOpacity = 1,
popup = ~LocationName)           # Full opacity
map <- map %>%
addCircleMarkers(
data = GWGU.select,  # Use all.GWGU as data
lng = ~Longitude,
lat = ~Latitude,
color = "black",            # Dot color
radius = radius_basic_dot,                # Dot radius
stroke = FALSE,            # No stroke
fillOpacity = 1,
popup = ~paste(
"<strong>Location:</strong> ", LocationName, "<br>",
"<strong>Counts:</strong><br>", popup_data$Counts[match(LocationName, popup_data$LocationName)]
),
group = "locations"
)
# Print the map
map
map <- leaflet() %>%
addProviderTiles(providers$OpenTopoMap)  # Add default OpenStreetMap tiles
# Add a dot for each unique location
map <- map %>%
addCircleMarkers(data = unique_locations,  # Use unique locations data
lng = ~Longitude,          # Longitude
lat = ~Latitude,           # Latitude
color ="gray",            # Dot color
radius = radius_basic_dot,                # Dot radius
stroke = FALSE,            # No stroke
fillOpacity = 0.5,
popup = ~LocationName)           # Full opacity
map <- map %>%
addCircleMarkers(
data = GWGU.select,  # Use all.GWGU as data
lng = ~Longitude,
lat = ~Latitude,
color = "black",            # Dot color
radius = radius_basic_dot,                # Dot radius
stroke = FALSE,            # No stroke
fillOpacity = 1,
popup = ~paste(
"<strong>Location:</strong> ", LocationName, "<br>",
"<strong>Counts:</strong><br>", popup_data$Counts[match(LocationName, popup_data$LocationName)]
),
group = "locations"
)
# Print the map
map
---
title: "Glaucous-wing Gull data & maps"
---
title: "Glaucous-wing Gull data & maps"
all.GWGU <- read.csv(paste(wkdir,"/KBB2020andSCoBC2023combined_all.csv", sep =""))
#
# script to make a map of the colonies
# visualize size and make data range selection
#
# libraries
#install.packages("tidyverse")
#install.packages("leaflet")
#install.packages("leaflet.extras")
# load libraries
library(tidyverse)
library(leaflet)
library(leaflet.extras)
# load data
wkdir <- getwd()
# load data
all.GWGU <- read.csv(paste(wkdir,"/KBB2020andSCoBC2023combined_all.csv", sep ="") )
#
# script to make a map of the colonies
# visualize size and make data range selection
#
# libraries
#install.packages("tidyverse")
#install.packages("leaflet")
#install.packages("leaflet.extras")
# load libraries
library(tidyverse)
library(leaflet)
library(leaflet.extras)
# load data
wkdir <- getwd()
# load data
all.GWGU <- read.csv(paste(wkdir,"/KBB2020andSCoBC2023combined_final.csv", sep ="") )
coord.na <- which(is.na(all.GWGU$Latitude))
all.GWGU[coord.na,]
# exclude data from VictoriaBBS as it has no coords
all.GWGU <- all.GWGU[-coord.na,]
# hist(all.GWGU$Year, breaks = 30)
# --- 1 maps of selection  --------
# Threshold year
threshold_year <- 2004
radius_basic_dot <- 4
# threshold to include colonies before the threshold_year
threshold_count <- 10
# length(unique(all.GWGU$LocationName)) #145 colonies total
# Filter locations with at least one Count > 0 on or after the threshold year
locations_above_threshold_year <- all.GWGU %>%
filter(Year >= threshold_year, Count > 0) %>%
distinct(LocationName)
# Filter locations with count >= threshold_count in any year before the threshold year
locations_above_threshold_count <- all.GWGU %>%
group_by(LocationName) %>%
filter(any(Count >= threshold_count & Year < threshold_year)) %>%
distinct(LocationName)
# Combine both conditions to get the final selection of locations
final_locations <- union(locations_above_threshold_year$LocationName, locations_above_threshold_count$LocationName)
length(final_locations)
# Filter the original data frame to include only the final selected locations and all their entries
GWGU.select <- all.GWGU %>%
filter(LocationName %in% final_locations)
#print(final_data)
# Group data by LocationName, sort by Year, and concatenate counts for each year
popup_data <- GWGU.select %>%
group_by(LocationName) %>%
arrange(Year) %>%
summarise(Counts = paste(Year, Count, sep = ": ", collapse = "<br>"))
# Create a leaflet map
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = GWGU.select,  # Use all.GWGU as data
lng = ~Longitude,
lat = ~Latitude,
color = "black",            # Dot color
radius = radius_basic_dot,                # Dot radius
stroke = FALSE,            # No stroke
fillOpacity = 1,
popup = ~paste(
"<strong>Location:</strong> ", LocationName, "<br>",
"<strong>Counts:</strong><br>", popup_data$Counts[match(LocationName, popup_data$LocationName)]
),
group = "locations"
)
# Display the map
map
# load data
all.GWGU <- read.csv(paste(wkdir,"/KBB2020andSCoBC2023combined_final.csv", sep ="") )
all.GWGU
# load data
all.GWGU <- read.csv(paste(wkdir,"/KBB2020andSCoBC2023combined_final.csv", sep ="") )
coord.na <- which(is.na(all.GWGU$Latitude))
all.GWGU[coord.na,]
# exclude data from VictoriaBBS as it has no coords
all.GWGU <- all.GWGU[-coord.na,]
# hist(all.GWGU$Year, breaks = 30)
# --- 1 maps of selection  --------
# Threshold year
threshold_year <- 2004
radius_basic_dot <- 4
# threshold to include colonies before the threshold_year
threshold_count <- 10
# Filter locations with at least one Count > 0 on or after the threshold year
locations_above_threshold_year <- all.GWGU %>%
filter(Year >= threshold_year, Count > 0) %>%
distinct(LocationName)
locations_above_threshold_year
all.GWGU
# load data
all.GWGU <- read.csv(paste(wkdir,"/KBB2020andSCoBC2023combined_final.csv", sep ="") )
all.GWGU
coord.na <- which(is.na(all.GWGU$Latitude))
coord.na
is.na(all.GWGU$Latitude)
str(all.GWGU)
coord.na
all.GWGU[coord.na,]
length(which(is.na(all.GWGU$Latitude)))
threshold_year <- 2004
radius_basic_dot <- 4
# threshold to include colonies before the threshold_year
threshold_count <- 10
# length(unique(all.GWGU$LocationName)) #145 colonies total
all.GWGU
# Threshold year
threshold_year <- 2004
radius_basic_dot <- 4
# threshold to include colonies before the threshold_year
threshold_count <- 10
# length(unique(all.GWGU$LocationName)) #145 colonies total
# Filter locations with at least one Count > 0 on or after the threshold year
locations_above_threshold_year <- all.GWGU %>%
filter(Year >= threshold_year, Count > 0) %>%
distinct(LocationName)
locations_above_threshold_year
# Filter locations with count >= threshold_count in any year before the threshold year
locations_above_threshold_count <- all.GWGU %>%
group_by(LocationName) %>%
filter(any(Count >= threshold_count & Year < threshold_year)) %>%
distinct(LocationName)
# Combine both conditions to get the final selection of locations
final_locations <- union(locations_above_threshold_year$LocationName, locations_above_threshold_count$LocationName)
length(final_locations)
# Filter the original data frame to include only the final selected locations and all their entries
GWGU.select <- all.GWGU %>%
filter(LocationName %in% final_locations)
#print(final_data)
# Group data by LocationName, sort by Year, and concatenate counts for each year
popup_data <- GWGU.select %>%
group_by(LocationName) %>%
arrange(Year) %>%
summarise(Counts = paste(Year, Count, sep = ": ", collapse = "<br>"))
# Create a leaflet map
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = GWGU.select,  # Use all.GWGU as data
lng = ~Longitude,
lat = ~Latitude,
color = "black",            # Dot color
radius = radius_basic_dot,                # Dot radius
stroke = FALSE,            # No stroke
fillOpacity = 1,
popup = ~paste(
"<strong>Location:</strong> ", LocationName, "<br>",
"<strong>Counts:</strong><br>", popup_data$Counts[match(LocationName, popup_data$LocationName)]
),
group = "locations"
)
# Display the map
map
# Threshold year
threshold_year <- 2004
radius_basic_dot <- 4
str(all.GWGU)
locations_covered <- all.GWGU %>%
filter(Covered == "covered")
locations_covered
black: Selected colonies (n=`{r} n.colonies`) in black.
black: Selected colonies (n=`{r} n.colonies`) in black.
black: Selected colonies (n=`{r} n.colonies`) in black.
locations_ParksCanada
locations_ParksCanada
locations_ParksCanada <- all.GWGU %>%
filter(ParksCanada == "ParksCanada")
locations_covered <- all.GWGU %>%
filter(Covered == "covered")
